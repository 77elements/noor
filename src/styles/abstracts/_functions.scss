/**
 * Functions - Sass Utility Functions
 * Mathematical and helper functions
 */

// ========================================
// Color Functions
// ========================================

// Convert hex to rgba with alpha
@function hex-to-rgba($hex, $alpha) {
  @return rgba($hex, $alpha);
}

// Lighten color by percentage
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Darken color by percentage
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// ========================================
// Spacing Functions
// ========================================

// Convert px to rem based on 16px root
@function rem($pixels) {
  @return #{$pixels / 16}rem;
}

// Convert px to em based on context
@function em($pixels, $context: 16) {
  @return #{$pixels / $context}em;
}

// Get spacing value by multiplier
@function spacing($multiplier) {
  @return $gap * $multiplier;
}

// ========================================
// Typography Functions
// ========================================

// Calculate line height
@function line-height($font-size, $target-height) {
  @return $target-height / $font-size;
}

// Calculate font size for optimal reading
@function optimal-font-size($viewport-width) {
  @if $viewport-width < 480px {
    @return $font-size-sm;
  } @else if $viewport-width < 768px {
    @return $font-size-base;
  } @else {
    @return $font-size-lg;
  }
}

// ========================================
// Layout Functions
// ========================================

// Calculate grid columns with gaps
@function grid-width($columns, $gap, $container-width) {
  $total-gaps: ($columns - 1) * $gap;
  @return ($container-width - $total-gaps) / $columns;
}

// Calculate aspect ratio height
@function aspect-ratio-height($width, $ratio) {
  @return $width / $ratio;
}

// ========================================
// Utility Functions
// ========================================

// Strip units from number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Check if value is a number
@function is-number($value) {
  @return type-of($value) == 'number';
}

// Check if value is a string
@function is-string($value) {
  @return type-of($value) == 'string';
}

// Get map value with fallback
@function map-get-fallback($map, $key, $fallback) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  }
  @return $fallback;
}

// ========================================
// Math Functions
// ========================================

// Clamp value between min and max
@function clamp-value($value, $min, $max) {
  @if $value < $min {
    @return $min;
  } @else if $value > $max {
    @return $max;
  }
  @return $value;
}

// Power function
@function pow($number, $exponent) {
  $value: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }
  @return $value;
}

// Calculate modular scale
@function modular-scale($increment, $value: $font-size-base, $ratio: 1.25) {
  @return $value * pow($ratio, $increment);
}

// ========================================
// Theme Functions
// ========================================

// Get theme color with CSS custom property fallback
@function theme-color($color-name, $fallback: null) {
  @if $fallback {
    @return var(--color-#{$color-name}, #{$fallback});
  }
  @return var(--color-#{$color-name});
}

// Calculate contrast ratio
@function contrast-ratio($color1, $color2) {
  $luminance1: luminance($color1);
  $luminance2: luminance($color2);

  @if $luminance1 > $luminance2 {
    @return ($luminance1 + 0.05) / ($luminance2 + 0.05);
  } @else {
    @return ($luminance2 + 0.05) / ($luminance1 + 0.05);
  }
}

// Get relative luminance of a color
@function luminance($color) {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);

  // Convert to 0-1 range
  $red: $red / 255;
  $green: $green / 255;
  $blue: $blue / 255;

  // Apply gamma correction
  @if $red <= 0.03928 {
    $red: $red / 12.92;
  } @else {
    $red: pow(($red + 0.055) / 1.055, 2.4);
  }

  @if $green <= 0.03928 {
    $green: $green / 12.92;
  } @else {
    $green: pow(($green + 0.055) / 1.055, 2.4);
  }

  @if $blue <= 0.03928 {
    $blue: $blue / 12.92;
  } @else {
    $blue: pow(($blue + 0.055) / 1.055, 2.4);
  }

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}